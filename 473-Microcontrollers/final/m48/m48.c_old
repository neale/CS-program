// lab4_skel.c 
// Neale Ratzlaff
// 11.12.08

#define F_CPU 8000000UL // cpu speed in hertz 
#define FOSC 8000000
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h>
#include "lm73_functions_skel.h"
#include "twi_master.h"

#define BAUD 9600
#define UBRR FOSC/16/BAUD-1

//Compute baudvalue at compile time from USART_BAUDRATE and F_CPU

char uart_tx_buf[40];      //holds string to send to crt
char uart_rx_buf[40];      //holds string that recieves data from uart

char uart_arr[16];  //holds a string to refresh the LCD
uint8_t i;                     //general purpose index

//delclare the 2 byte TWI read and write buffers (lm73_functions_skel.h)
extern uint8_t lm73_wr_buf[2]; //keep this internal, only write a little
extern uint8_t lm73_rd_buf[2];

void uart_init(void){

    /*Set baud rate */
    unsigned int ubrr = UBRR;
    UBRR0H = (unsigned char)(ubrr>>8);
    UBRR0L = (unsigned char)ubrr;
    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<USBS0) | (1<<UCSZ00) | (1 << UCSZ01);
}

unsigned char uart_receive(void) {
    /* Wait for data to be received */
    while (!(UCSR0A & (1<<RXC0))) ;

    /* Get and return received data from buffer */
    return UDR0;
}

void uart_putc(char data) {

    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
    /* Put data into buffer, sends the data */
    UDR0 = data;
    /* Wait for data to be received */
}
//******************************************************************

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
        uart_putc(str[i]);
        i++;
    }
}
void uart_flush( void ){

    unsigned char dummy;
    while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
}

int main(void) {

    uart_init();
    init_twi();
    uint16_t lm73_temp;  //a place to assemble the temperature from the lm73
    unsigned int temp = 0;
    //set LM73 mode for reading temperature by loading pointer register
    //this is done outside of the normal interrupt mode of operation 
    lm73_wr_buf[0] = LM73_PTR_TEMP;   //load lm73_wr_buf[0] with temperature pointer address
    twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1); //start the TWI write process (twi_start_wr())
    _delay_ms(2);      //wait for the xfer to finish
    sei();
    while(1){          //main while loop
        
        _delay_ms(300);  //tenth second wait
        twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temp
        _delay_ms(2);    //wait for it to finish

        //now assemble the two bytes read back into one 16-bit value
        lm73_temp =  lm73_rd_buf[0]<<8;//save high temperature byte into lm73_tem //shift it into upper byte 
        lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
        temp = lm73_temp/128;
        uart_putc(temp);
        //convert to string in array with itoa() from avr-libc 0 Farhanheit 1 Celcius
    }
    return 0;

}//main
