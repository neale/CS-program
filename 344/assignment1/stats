#!/bin/bash -e
FLAG=$1
INPUT=$2

# check if #arguments are not two, this means either stdin is used
# or there is an error
if [ $# -ne 2 ]; then
    if [[ $# -eq 0 ]] || [[ $# -gt 2 ]]; then
      echo -e "Usage: stats {-rows|-cols} [file]"; exit 0
    fi
    # checks if any argument contains a file then assigns it to INPUT
    [ $# -ge 1 -a -f "$1" ] && INPUT="$1" || INPUT="-"
    # a double check makes me feel better 
    cat $INPUT >> input.$$
    INPUT=input.$$
fi
# cannot stop or catch SIGKILL
trap "check_and_clean; exit 0" SIGINT SIGHUP SIGTERM
# look for improper usage (if flag has no "-r", "-g", if flag and input are not set, and no args
if [[ $FLAG != *-r* && $FLAG != *-c* ]] || [[ -z $FLAG && -z $INPUT ]] || [[ $# -eq 0 ]]; then 
    # print proper usage/error message
    echo -e "Usage: stats {-rows|-cols} [file]"
    exit 0
fi

# do the janitorial work, if permissions are not set
# functions are easier to call whenever I need a cleanup
function check_and_clean {
    if ! [ -r $INPUT ]; then
        echo Cannot read $INPUT
        return 1
        exit
    fi
    #clean temp files
    rm -rf row.$$ median.$$ col.$$ sorted.$$
}
check_and_clean
# row mode
if [[ $FLAG == *-r* ]]; then
    # give prototype output if input file is empty
    # The average and median is blank, not 0. 0 implies some content in file
    if ! [ -s $INPUT ]; then
        echo Average Median; exit 1
    fi
    echo Average Median
    # The general flow is to do an operation on each line (row) in the file
    # get a line, sum it, use the length to determine a median, then sort and 
    # index in to the sorted list to find the median

    # iterate over each line in the file
    cat $INPUT | while read -r line  || [[ -n "$line" ]]; do
        sum=0; count=0
        # get the number of rows, and sum them
        for i in $line; do
            sum=$(($sum + $i))
            echo $i >> row.$$
            count=$(($count + 1))
        done
        # median is either the middle element, or the one after it. 
        median_cnt=$(($count / 2))
        if [ $(($count % 2)) -eq 1 ]; then
            median_cnt=$(($count / 2 + 1))
        fi
        # sort the rows 
        SORTED=`cat row.$$ | sort -n`
        # grab all lines starting ar medium, then take the top one
        MEDIAN=`tail -n+$median_cnt row.$$ | head -n1`
        # use bash math library to do calculation
        AVERAGE=$(echo "$sum/$count" | bc -l)
        # truncate precision to an int 
        printf "%.0f\t%d\n" $AVERAGE $MEDIAN 
        check_and_clean # clean up
    done
fi

if [[ $FLAG == *-c* ]]; then
    # column mode, prototype output if empty
    if ! [ -s $INPUT ]; then
        printf "Averages:\n\nMedians:\n"; exit 1
    fi
    count=0
    # get number of elements in each column
    while read -r line; do
        count=$(($count + 1))
    done < $INPUT
    # get number of columns

    # this was annoying, awk is just looking for groups that end in a space
    # each column is being considered sperately by the loop
    col_count=`cat $INPUT | awk 'BEGIN{FS=" "};{print NF;exit}'`
    
    # devide by 2 will work if even
    median_cnt=$(($count / 2))
    # catch if odd
    if [ $(($count % 2)) -eq 1 ]; then
        median_cnt=$(($count / 2 + 1))
    fi

    # an array made this far easier for multi-char numbers
    # than trying to format a file correctly,
    for i in $(seq 1 $col_count); do
        # assign each column to an element
        ARR[$i]=`awk '{ print $'$i' }' $INPUT`
    done
    # loop over each column
    for i in $(seq 1 $col_count); do
        sum=0
        # save the column into a file 
        echo "${ARR[i]}" > col.$$
        # add each element and save in sum
        for i in $(<col.$$); do
            sum=$(($sum + $i))
        done < col.$$
        # use bc for aritmatic 
        AVERAGE=$(echo "$sum/$count" | bc -l) 
        printf "%.0f " $AVERAGE >> averages.$$
        # sort the saved column numerically
        SORTED=`cat col.$$ | sort -n`
        echo $SORTED > sorted.$$
        # translate spaces into new lines, redirect to med
        echo "`tr ' ' '\n' < sorted.$$`" > med.$$
        # use sed for median, suppress output, find first instance
        # of median_cnt, then quit. search from med.$$
        MEDIAN=`sed -n ''$median_cnt'{p;q}' med.$$`
        echo $MEDIAN >> medians.$$
        # print floating point for rounding
        # clean up
        check_and_clean
        rm -rf med.$$
    done
    # print answers
    echo -e Averages:
    cat averages.$$
    printf "\nMedians:\n"
    # medians are in seperate rows, so print them on a single line 
    while read -r line; do
        printf "%s\0 " $line
    done < medians.$$
    # clean up
    rm -rf averages.$$ medians.$$
fi
exit 0 # exit successfully.  
