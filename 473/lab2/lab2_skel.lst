
lab2_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010a  0080010a  0000031c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000330  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007af  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000234  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035c  00000000  00000000  00000dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000166  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024a  00000000  00000000  00001322  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  c6:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <debounce_switch>:
//decimal to 7-segment LED display encodings, logic "0" turns on segment
uint8_t dec_to_7seg[12];

int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  ce:	40 b3       	in	r20, 0x10	; 16
  d0:	20 91 0a 01 	lds	r18, 0x010A
  d4:	30 91 0b 01 	lds	r19, 0x010B
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	30 6e       	ori	r19, 0xE0	; 224
  de:	84 2f       	mov	r24, r20
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	28 2b       	or	r18, r24
  e6:	39 2b       	or	r19, r25
  e8:	30 93 0b 01 	sts	0x010B, r19
  ec:	20 93 0a 01 	sts	0x010A, r18
  if (state == 0xF000) {
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	21 15       	cp	r18, r1
  f4:	30 4f       	sbci	r19, 0xF0	; 240
  f6:	09 f0       	breq	.+2      	; 0xfa <debounce_switch+0x2c>
  f8:	80 e0       	ldi	r24, 0x00	; 0
      return 1;
  }
  return 0;
}
  fa:	08 95       	ret

000000fc <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(uint8_t button) {
//******************************************************************************
    while(!button) {
  fc:	81 11       	cpse	r24, r1
  fe:	1f c0       	rjmp	.+62     	; 0x13e <chk_buttons+0x42>
//decimal to 7-segment LED display encodings, logic "0" turns on segment
uint8_t dec_to_7seg[12];

int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
 100:	60 b3       	in	r22, 0x10	; 16
 102:	80 91 0a 01 	lds	r24, 0x010A
 106:	90 91 0b 01 	lds	r25, 0x010B
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	90 6e       	ori	r25, 0xE0	; 224
 110:	46 2f       	mov	r20, r22
 112:	41 70       	andi	r20, 0x01	; 1
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	84 2b       	or	r24, r20
 118:	95 2b       	or	r25, r21
 11a:	90 93 0b 01 	sts	0x010B, r25
 11e:	80 93 0a 01 	sts	0x010A, r24
 122:	40 b3       	in	r20, 0x10	; 16
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	90 6e       	ori	r25, 0xE0	; 224
 12a:	24 2f       	mov	r18, r20
 12c:	21 70       	andi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	82 2b       	or	r24, r18
 132:	93 2b       	or	r25, r19
 134:	90 93 0b 01 	sts	0x010B, r25
 138:	80 93 0a 01 	sts	0x010A, r24
 13c:	f2 cf       	rjmp	.-28     	; 0x122 <chk_buttons+0x26>
uint8_t chk_buttons(uint8_t button) {
//******************************************************************************
    while(!button) {
        debounce_switch();
    }
}
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret

00000142 <get_segment>:
uint8_t get_segment(uint8_t bcd) {
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	30 f4       	brcc	.+12     	; 0x152 <get_segment+0x10>
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
            break;
        default:
            return 0;
            break;
    }   
}
 154:	08 95       	ret

00000156 <segsum>:
//***********************************************************************************
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum, unsigned int *digit_array) {
 156:	9c 01       	movw	r18, r24
 158:	fb 01       	movw	r30, r22
  
  int digits = 0;
  //determine how many digits there are 
  while (sum != 0) {
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	71 f0       	breq	.+28     	; 0x17a <segsum+0x24>
    sum /= 10;
 15e:	ad ec       	ldi	r26, 0xCD	; 205
 160:	bc ec       	ldi	r27, 0xCC	; 204
 162:	0e 94 2e 01 	call	0x25c	; 0x25c <__umulhisi3>
 166:	9c 01       	movw	r18, r24
 168:	36 95       	lsr	r19
 16a:	27 95       	ror	r18
 16c:	36 95       	lsr	r19
 16e:	27 95       	ror	r18
 170:	36 95       	lsr	r19
 172:	27 95       	ror	r18
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum, unsigned int *digit_array) {
  
  int digits = 0;
  //determine how many digits there are 
  while (sum != 0) {
 174:	21 15       	cp	r18, r1
 176:	31 05       	cpc	r19, r1
 178:	91 f7       	brne	.-28     	; 0x15e <segsum+0x8>
    sum /= 10;
    digits++;
  } 
  //break up decimal sum into 4 digit-segments
  digit_array[4] = sum/1000 % 10;
 17a:	11 86       	std	Z+9, r1	; 0x09
 17c:	10 86       	std	Z+8, r1	; 0x08
  digit_array[3] = sum/100 % 10; 
 17e:	17 82       	std	Z+7, r1	; 0x07
 180:	16 82       	std	Z+6, r1	; 0x06
  digit_array[1] = sum/10 % 10;
 182:	13 82       	std	Z+3, r1	; 0x03
 184:	12 82       	std	Z+2, r1	; 0x02
  digit_array[0] = sum % 10;
 186:	11 82       	std	Z+1, r1	; 0x01
 188:	10 82       	st	Z, r1
 18a:	08 95       	ret

0000018c <main>:
    uint8_t i = 0;
    uint16_t count = 0;
    unsigned int seg_count[5] = {0};

    //set port bits 4-7 B as outputs
    DDRB = 0xF0;
 18c:	80 ef       	ldi	r24, 0xF0	; 240
 18e:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;
 190:	18 ba       	out	0x18, r1	; 24

//***********************************************************************************
void main() {
    //int nums = 0;
    uint8_t i = 0;
    uint16_t count = 0;
 192:	e0 e0       	ldi	r30, 0x00	; 0
 194:	f0 e0       	ldi	r31, 0x00	; 0
    while(1){
      //insert loop delay for debounce
      _delay_ms(2);
      //make PORTA an input port with pullups 
      CLEAR(DDRA);
      SET(PORTA);
 196:	0f ef       	ldi	r16, 0xFF	; 255
      SET(DDRA);
      CLEAR(PORTA);
      CLEAR(PORTB);
      //send 7 segment code to LED segments
      for (i = 4; i < 8; i++) {
              PORTB |= (1 << i);
 198:	c1 e0       	ldi	r28, 0x01	; 1
 19a:	d0 e0       	ldi	r29, 0x00	; 0
              PORTA = TWO;
 19c:	14 e2       	ldi	r17, 0x24	; 36
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x16>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x1c>
 1a8:	00 00       	nop

    while(1){
      //insert loop delay for debounce
      _delay_ms(2);
      //make PORTA an input port with pullups 
      CLEAR(DDRA);
 1aa:	1a ba       	out	0x1a, r1	; 26
      SET(PORTA);
 1ac:	0b bb       	out	0x1b, r16	; 27
      //enable tristate buffer for pushbutton switches
      CLEAR(PORTA);
 1ae:	1b ba       	out	0x1b, r1	; 27
      
      //bound the count to 0 - 1023
      count += __builtin_popcount(PINA);
 1b0:	89 b3       	in	r24, 0x19	; 25
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 14 01 	call	0x228	; 0x228 <__popcounthi2>
 1b8:	e8 0f       	add	r30, r24
 1ba:	f9 1f       	adc	r31, r25
      
      if (count == 1023) {
 1bc:	ef 3f       	cpi	r30, 0xFF	; 255
 1be:	93 e0       	ldi	r25, 0x03	; 3
 1c0:	f9 07       	cpc	r31, r25
 1c2:	79 f1       	breq	.+94     	; 0x222 <main+0x96>
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum, unsigned int *digit_array) {
  
  int digits = 0;
  //determine how many digits there are 
  while (sum != 0) {
 1c4:	30 97       	sbiw	r30, 0x00	; 0
 1c6:	79 f0       	breq	.+30     	; 0x1e6 <main+0x5a>
 1c8:	9f 01       	movw	r18, r30
    sum /= 10;
 1ca:	ad ec       	ldi	r26, 0xCD	; 205
 1cc:	bc ec       	ldi	r27, 0xCC	; 204
 1ce:	0e 94 2e 01 	call	0x25c	; 0x25c <__umulhisi3>
 1d2:	9c 01       	movw	r18, r24
 1d4:	36 95       	lsr	r19
 1d6:	27 95       	ror	r18
 1d8:	36 95       	lsr	r19
 1da:	27 95       	ror	r18
 1dc:	36 95       	lsr	r19
 1de:	27 95       	ror	r18
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum, unsigned int *digit_array) {
  
  int digits = 0;
  //determine how many digits there are 
  while (sum != 0) {
 1e0:	21 15       	cp	r18, r1
 1e2:	31 05       	cpc	r19, r1
 1e4:	91 f7       	brne	.-28     	; 0x1ca <main+0x3e>
      
      segsum(count, seg_count);
      //break up the disp_value to 4, BCD digits in the array: call (segsum)
      //bound a counter (0-4) to keep track of digit to display 
      //make PORTA an output
      SET(DDRA);
 1e6:	0a bb       	out	0x1a, r16	; 26
      CLEAR(PORTA);
 1e8:	1b ba       	out	0x1b, r1	; 27
      CLEAR(PORTB);
 1ea:	18 ba       	out	0x18, r1	; 24
 1ec:	24 e0       	ldi	r18, 0x04	; 4
 1ee:	30 e0       	ldi	r19, 0x00	; 0
      //send 7 segment code to LED segments
      for (i = 4; i < 8; i++) {
              PORTB |= (1 << i);
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	ae 01       	movw	r20, r28
 1f4:	02 2e       	mov	r0, r18
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <main+0x6e>
 1f8:	44 0f       	add	r20, r20
 1fa:	0a 94       	dec	r0
 1fc:	ea f7       	brpl	.-6      	; 0x1f8 <main+0x6c>
 1fe:	84 2b       	or	r24, r20
 200:	88 bb       	out	0x18, r24	; 24
              PORTA = TWO;
 202:	1b bb       	out	0x1b, r17	; 27
 204:	4f ef       	ldi	r20, 0xFF	; 255
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	90 e3       	ldi	r25, 0x30	; 48
 20a:	41 50       	subi	r20, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x7e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x88>
 214:	00 00       	nop
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
      //make PORTA an output
      SET(DDRA);
      CLEAR(PORTA);
      CLEAR(PORTB);
      //send 7 segment code to LED segments
      for (i = 4; i < 8; i++) {
 21a:	28 30       	cpi	r18, 0x08	; 8
 21c:	31 05       	cpc	r19, r1
 21e:	41 f7       	brne	.-48     	; 0x1f0 <main+0x64>
 220:	be cf       	rjmp	.-132    	; 0x19e <main+0x12>
      
      //bound the count to 0 - 1023
      count += __builtin_popcount(PINA);
      
      if (count == 1023) {
          count = 0;
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	df cf       	rjmp	.-66     	; 0x1e6 <main+0x5a>

00000228 <__popcounthi2>:
 228:	0e 94 1e 01 	call	0x23c	; 0x23c <__popcountqi2>
 22c:	8f 93       	push	r24
 22e:	89 2f       	mov	r24, r25
 230:	0e 94 1e 01 	call	0x23c	; 0x23c <__popcountqi2>
 234:	99 27       	eor	r25, r25

00000236 <__popcounthi2_tail>:
 236:	0f 90       	pop	r0
 238:	80 0d       	add	r24, r0
 23a:	08 95       	ret

0000023c <__popcountqi2>:
 23c:	08 2e       	mov	r0, r24
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	06 94       	lsr	r0
 242:	06 94       	lsr	r0
 244:	81 1d       	adc	r24, r1
 246:	06 94       	lsr	r0
 248:	81 1d       	adc	r24, r1
 24a:	06 94       	lsr	r0
 24c:	81 1d       	adc	r24, r1
 24e:	06 94       	lsr	r0
 250:	81 1d       	adc	r24, r1
 252:	06 94       	lsr	r0
 254:	81 1d       	adc	r24, r1
 256:	06 94       	lsr	r0
 258:	80 1d       	adc	r24, r0
 25a:	08 95       	ret

0000025c <__umulhisi3>:
 25c:	a2 9f       	mul	r26, r18
 25e:	b0 01       	movw	r22, r0
 260:	b3 9f       	mul	r27, r19
 262:	c0 01       	movw	r24, r0
 264:	a3 9f       	mul	r26, r19
 266:	70 0d       	add	r23, r0
 268:	81 1d       	adc	r24, r1
 26a:	11 24       	eor	r1, r1
 26c:	91 1d       	adc	r25, r1
 26e:	b2 9f       	mul	r27, r18
 270:	70 0d       	add	r23, r0
 272:	81 1d       	adc	r24, r1
 274:	11 24       	eor	r1, r1
 276:	91 1d       	adc	r25, r1
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
